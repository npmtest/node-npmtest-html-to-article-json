{"/home/travis/build/npmtest/node-npmtest-html-to-article-json/test.js":"/* istanbul instrument in package npmtest_html_to_article_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/lib.npmtest_html_to_article_json.js":"/* istanbul instrument in package npmtest_html_to_article_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_html_to_article_json = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_html_to_article_json = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-html-to-article-json && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_html_to_article_json */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_html_to_article_json\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_html_to_article_json.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_html_to_article_json.rollup.js'] =\n            local.assetsDict['/assets.npmtest_html_to_article_json.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_html_to_article_json.__dirname + '/lib.npmtest_html_to_article_json.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/index.js":"'use strict';\n\nvar _parse = require('./parse');\n\nvar _parse2 = _interopRequireDefault(_parse);\n\nvar _normalize = require('./normalize');\n\nvar _normalize2 = _interopRequireDefault(_normalize);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nmodule.exports = function () {\n  var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  var parse = (0, _parse2.default)(opts);\n  var normalize = (0, _normalize2.default)(opts);\n\n  return function (elm) {\n    return normalize(parse(elm));\n  };\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/parse/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _es6Set = require('es6-set');\n\nvar _es6Set2 = _interopRequireDefault(_es6Set);\n\nvar _embeds = require('./embeds');\n\nvar _embeds2 = _interopRequireDefault(_embeds);\n\nvar _text = require('./text');\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _blockElement = require('./block-element');\n\nvar _blockElement2 = _interopRequireDefault(_blockElement);\n\nvar _queryDom = require('query-dom');\n\nvar _queryDom2 = _interopRequireDefault(_queryDom);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar HEAD_NODE_NAMES = new _es6Set2.default(['title', 'base', 'link', 'meta', 'script', 'noscript', 'style']);\n\nvar linebreak = function linebreak(elm) {\n  return elm.tagName.toLowerCase() === 'br' ? { type: 'linebreak' } : null;\n};\n\nvar isEmptyTextNode = function isEmptyTextNode(elm) {\n  return elm.nodeName === '#text' && elm.data.length === 0;\n};\n\nexports.default = function (opts) {\n  var text = (0, _text2.default)(opts);\n  var embed = (0, _embeds2.default)(opts);\n\n  var parse = function parse(elms, textOpts, result) {\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      // ELEMENT_NODE\n      if (elm.tagName && !HEAD_NODE_NAMES.has(elm.tagName.toLowerCase())) {\n        elementNode(elm, textOpts, result);\n      }\n\n      // TEXT_NODE\n      if (elm.nodeName === '#text' && elm.data.length > 0) {\n        result.push(text(textOpts, elm));\n      }\n    }\n    return result;\n  };\n\n  var blockElement = (0, _blockElement2.default)(parse, text);\n\n  var elementNode = function elementNode(elm, textOpts, result) {\n    var linebreakResult = linebreak(elm);\n    if (linebreakResult) {\n      result.push(linebreakResult);\n      return;\n    }\n\n    var embedResult = embed(elm);\n    if (embedResult) {\n      result.push(embedResult);\n      return;\n    }\n\n    var blockElementResult = blockElement(elm, textOpts);\n    if (blockElementResult) {\n      result.push(blockElementResult);\n      return;\n    }\n\n    var emptyMark = elm.tagName.toLowerCase() === 'mark' && (elm.childNodes.length === 0 || elm.childNodes.length === 1 && isEmptyTextNode(elm.childNodes[0]));\n    if (emptyMark) {\n      result.push(text(textOpts, elm));\n      return;\n    }\n\n    if (elm.childNodes.length) {\n      parse(elm.childNodes, text(textOpts, elm), result);\n    }\n  };\n\n  return function (input) {\n    if (typeof input === 'string') {\n      return parse((0, _queryDom2.default)(input), {}, []);\n    }\n\n    if (input.nodeName) {\n      return parse([input], {}, []);\n    }\n\n    return parse(input, {}, []);\n  };\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/parse/embeds.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _text = require('./text');\n\nvar _text2 = _interopRequireDefault(_text);\n\nvar _embeds = require('embeds');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar transformers = {\n  custom: function custom(_ref) {\n    var height = _ref.height,\n        width = _ref.width,\n        secure = _ref.secure,\n        src = _ref.src;\n    return {\n      type: 'embed',\n      embedType: 'custom',\n      caption: [],\n      attribution: [],\n      width: width,\n      height: height,\n      secure: secure,\n      src: src\n    };\n  },\n  vine: function vine(_ref2) {\n    var id = _ref2.id,\n        url = _ref2.url;\n    return {\n      type: 'embed',\n      embedType: 'vine',\n      caption: [],\n      attribution: [],\n      id: id,\n      url: url\n    };\n  },\n  spotify: function spotify(_ref3) {\n    var spotifyUri = _ref3.spotifyUri,\n        width = _ref3.width,\n        height = _ref3.height,\n        url = _ref3.url;\n    return {\n      type: 'embed',\n      embedType: 'spotify',\n      caption: [],\n      attribution: [],\n      spotifyUri: spotifyUri,\n      width: width,\n      height: height,\n      url: url\n    };\n  },\n  facebook: function facebook(_ref4) {\n    var embedAs = _ref4.embedAs,\n        headline = _ref4.headline,\n        date = _ref4.date,\n        text = _ref4.text,\n        url = _ref4.url,\n        user = _ref4.user;\n    return {\n      type: 'embed',\n      embedType: 'facebook',\n      caption: [],\n      attribution: [],\n      headline: headline || '',\n      url: url,\n      date: date,\n      user: user,\n      text: text,\n      embedAs: embedAs\n    };\n  },\n  instagram: function instagram(_ref5) {\n    var date = _ref5.date,\n        id = _ref5.id,\n        text = _ref5.text,\n        url = _ref5.url,\n        user = _ref5.user;\n    return {\n      type: 'embed',\n      embedType: 'instagram',\n      caption: [],\n      attribution: [],\n      date: date || '',\n      user: user || '',\n      id: id,\n      text: text,\n      url: url\n    };\n  },\n  twitter: function twitter(_ref6) {\n    var embedAs = _ref6.embedAs,\n        url = _ref6.url,\n        date = _ref6.date,\n        user = _ref6.user,\n        id = _ref6.id,\n        text = _ref6.text;\n    return {\n      type: 'embed',\n      embedType: 'twitter',\n      caption: [],\n      attribution: [],\n      embedAs: embedAs,\n      url: url,\n      date: date,\n      user: user,\n      id: id,\n      text: text\n    };\n  },\n  youtube: function youtube(_ref7) {\n    var youtubeId = _ref7.youtubeId;\n    return {\n      type: 'embed',\n      embedType: 'youtube',\n      caption: [],\n      attribution: [],\n      youtubeId: youtubeId\n    };\n  },\n  tumblr: function tumblr(_ref8) {\n    var url = _ref8.url,\n        did = _ref8.did,\n        text = _ref8.text;\n    return {\n      type: 'embed',\n      embedType: 'tumblr',\n      caption: [],\n      url: url,\n      did: did,\n      text: text\n    };\n  },\n  tidal: function tidal(_ref9) {\n    var dataId = _ref9.dataId,\n        dataType = _ref9.dataType;\n    return {\n      type: 'embed',\n      embedType: 'tidal',\n      caption: [],\n      dataId: dataId,\n      dataType: dataType\n    };\n  },\n  video: function video(_ref10) {\n    var width = _ref10.width,\n        height = _ref10.height,\n        sources = _ref10.sources;\n    return {\n      type: 'embed',\n      embedType: 'video',\n      caption: [],\n      attribution: [],\n      width: width || '',\n      height: height || '',\n      sources: sources\n    };\n  },\n  image: function image(_ref11) {\n    var width = _ref11.width,\n        height = _ref11.height,\n        src = _ref11.src,\n        alt = _ref11.alt;\n    return {\n      type: 'embed',\n      embedType: 'image',\n      caption: alt ? [{ content: alt, type: 'text' }] : [],\n      attribution: [],\n      width: width || '',\n      height: height || '',\n      src: src\n    };\n  }\n};\n\nexports.default = function (opts) {\n  var text = (0, _text2.default)(opts);\n  var _opts$customEmbedType = opts.customEmbedTypes,\n      customEmbedTypes = _opts$customEmbedType === undefined ? [] : _opts$customEmbedType;\n\n\n  var getEmbed = function getEmbed(elms) {\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      if (elm && elm.tagName) {\n        var obj = toEmbedObj(elm) || getEmbed(elm.childNodes);\n        if (obj) {\n          return obj;\n        }\n      }\n    }\n  };\n\n  var parseCustomEmbed = function parseCustomEmbed(elm) {\n    for (var i = 0; i < customEmbedTypes.length; ++i) {\n      var customEmbed = customEmbedTypes[i];\n      var obj = customEmbed.parse(elm);\n      if (obj) {\n        return obj;\n      }\n    }\n  };\n\n  var parseBuiltinEmbed = function parseBuiltinEmbed(elm) {\n    var obj = (0, _embeds.parse)(elm);\n    return obj && transformers[obj.type] && transformers[obj.type](obj);\n  };\n\n  var toEmbedObj = function toEmbedObj(elm) {\n    return parseCustomEmbed(elm) || parseBuiltinEmbed(elm) || null;\n  };\n\n  var getCaption = function getCaption(elms, result, opts) {\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      // ELEMENT_NODE\n      if (elm.tagName && elm.tagName.toLowerCase() !== 'cite' && elm.childNodes.length) {\n        getCaption(elm.childNodes, result, text(opts, elm));\n      }\n\n      // TEXT_NODE\n      if (elm.nodeName === '#text' && elm.data.length > 0) {\n        result.push(text(opts, elm));\n      }\n    }\n\n    return result;\n  };\n\n  var getAttribution = function getAttribution(elms, result, opts) {\n    for (var i = 0; i < elms.length; i++) {\n      var elm = elms[i];\n\n      // ELEMENT_NODE\n      if (elm.tagName && elm.childNodes.length) {\n        getAttribution(elm.childNodes, result, text(opts, elm));\n      }\n\n      // TEXT_NODE\n      if (elm.nodeName === '#text' && elm.data.length > 0) {\n        result.push(text(opts, elm));\n      }\n    }\n\n    return result;\n  };\n\n  var getFigureProps = function getFigureProps(_ref12) {\n    var attributes = _ref12.attributes,\n        elm = _ref12.elm;\n\n    var figureProps = {};\n    if (!elm.attributes || !elm.attributes.length) {\n      return figureProps;\n    }\n\n    attributes.forEach(function (name) {\n      var value = elm.getAttribute(name);\n      if (value) {\n        figureProps[name] = value;\n      }\n    });\n\n    return figureProps;\n  };\n\n  return function (elm) {\n    if (elm.tagName && elm.tagName.toLowerCase() === 'figure') {\n      var obj = getEmbed(elm.childNodes);\n      if (obj && opts.parseFigureProps) {\n        obj.figureProps = getFigureProps({\n          attributes: opts.parseFigureProps,\n          elm: elm\n        });\n      }\n      if (obj) {\n        var figcaptions = elm.getElementsByTagName('figcaption');\n        obj.caption = getCaption(figcaptions, [], {});\n        var cites = elm.getElementsByTagName('cite');\n        obj.attribution = getAttribution(cites, [], {});\n      }\n      return obj;\n    }\n\n    return toEmbedObj(elm);\n  };\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/parse/text.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _generateFunction = require('generate-function');\n\nvar _generateFunction2 = _interopRequireDefault(_generateFunction);\n\nvar _textFormattings = require('../text-formattings');\n\nvar _textFormattings2 = _interopRequireDefault(_textFormattings);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (opts) {\n  var textFormattings = (0, _textFormattings2.default)(opts);\n\n  var fn = (0, _generateFunction2.default)();\n\n  var renderTextOpts = textFormattings.reduce(function (opts, row) {\n    opts[row.property] = row.get;\n    if (row.classProperty) {\n      opts[row.classProperty] = row.getClass;\n    }\n    return opts;\n  }, {});\n\n  fn = fn('function text (opts, elm) {')('return {');\n  fn = fn('  type: \\'text\\',');\n\n  Object.keys(renderTextOpts).forEach(function (key) {\n    fn = fn('  %s: opts[\\'%s\\'] || renderTextOpts[\\'%s\\'](elm),', key, key, key);\n  });\n\n  fn = fn('};')('}');\n\n  return fn.toFunction({\n    renderTextOpts: renderTextOpts\n  });\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/text-formattings.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar defaultTextFormattings = [{\n  property: 'content',\n  get: function get(elm) {\n    return elm.nodeName === '#text' && elm.data || null;\n  }\n}, {\n  property: 'href',\n  get: function get(elm) {\n    if (!elm.tagName) {\n      return null;\n    }\n    return elm.tagName.toLowerCase() === 'a' && elm.getAttribute('href') || null;\n  }\n}, {\n  property: 'italic',\n  get: function get(elm) {\n    if (!elm.tagName) {\n      return false;\n    }\n    var tagName = elm.tagName.toLowerCase();\n\n    return tagName === 'i' || tagName === 'em' || elm.style.fontStyle === 'italic';\n  }\n}, {\n  property: 'bold',\n  get: function get(elm) {\n    if (!elm.tagName) {\n      return false;\n    }\n    var fontWeight = elm.style.fontWeight;\n    var tagName = elm.tagName.toLowerCase();\n    return tagName === 'b' || tagName === 'strong' || fontWeight === 'bold' || parseInt(fontWeight, 10) >= 700;\n  }\n}, {\n  property: 'mark',\n  classProperty: 'markClass',\n  getClass: function getClass(elm) {\n    if (!elm.tagName || elm.tagName.toLowerCase() !== 'mark') {\n      return null;\n    }\n\n    return elm.getAttribute('class');\n  },\n  get: function get(elm) {\n    if (!elm.tagName) {\n      return false;\n    }\n\n    var tagName = elm.tagName.toLowerCase();\n    return tagName === 'mark';\n  }\n}, {\n  property: 'strikethrough',\n  get: function get(elm) {\n    if (!elm.tagName) {\n      return false;\n    }\n\n    var tagName = elm.tagName.toLowerCase();\n    return tagName === 's' || tagName === 'strike' || tagName === 'del';\n  }\n}];\n\nexports.default = function (opts) {\n  return opts.customTextFormattings ? defaultTextFormattings.concat(opts.customTextFormattings) : defaultTextFormattings;\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/parse/block-element.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _es6Set = require('es6-set');\n\nvar _es6Set2 = _interopRequireDefault(_es6Set);\n\nvar _blockElements = require('block-elements');\n\nvar _blockElements2 = _interopRequireDefault(_blockElements);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar BLOCK_ELEMENTS = new _es6Set2.default(_blockElements2.default);\nvar TEXT_ELEMENTS = {\n  h1: 'header1',\n  h2: 'header2',\n  h3: 'header3',\n  h4: 'header4',\n  h5: 'header5',\n  h6: 'header6',\n  p: 'paragraph',\n  blockquote: 'blockquote'\n};\n\nvar isPullQuote = function isPullQuote(elm) {\n  return elm.classList.contains('q');\n};\n\nvar createBlockElement = function createBlockElement(type, elm) {\n  if (type === 'blockquote') {\n    return {\n      type: type,\n      pullQuote: isPullQuote(elm),\n      children: []\n    };\n  } else {\n    return {\n      type: type,\n      children: []\n    };\n  }\n};\n\n// inject parse to avoid recursive requires\n\nexports.default = function (parse, text) {\n  return function (elm, textOpts) {\n    var tagName = elm.tagName.toLowerCase();\n\n    if (BLOCK_ELEMENTS.has(tagName)) {\n      var type = TEXT_ELEMENTS[tagName] || 'block';\n\n      var blockElement = createBlockElement(type, elm);\n\n      if (elm.childNodes.length) {\n        parse(elm.childNodes, text(textOpts, elm), blockElement.children);\n      }\n\n      return blockElement;\n    }\n  };\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/normalize/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _mergeTextNodes = require('./merge-text-nodes');\n\nvar _mergeTextNodes2 = _interopRequireDefault(_mergeTextNodes);\n\nvar _flattenTree = require('./flatten-tree');\n\nvar _flattenTree2 = _interopRequireDefault(_flattenTree);\n\nvar _handleWhitespace = require('./handle-whitespace');\n\nvar _handleWhitespace2 = _interopRequireDefault(_handleWhitespace);\n\nvar _minimumContent = require('./minimum-content');\n\nvar _minimumContent2 = _interopRequireDefault(_minimumContent);\n\nvar _removeExtraLinebreaks = require('./remove-extra-linebreaks');\n\nvar _removeExtraLinebreaks2 = _interopRequireDefault(_removeExtraLinebreaks);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nexports.default = function (opts) {\n  var mergeTextNodes = (0, _mergeTextNodes2.default)(opts);\n\n  return function (input) {\n    var tree = (0, _flattenTree2.default)(input);\n    mergeTextNodes(tree);\n    (0, _handleWhitespace2.default)(tree);\n    (0, _minimumContent2.default)(tree);\n    (0, _removeExtraLinebreaks2.default)(tree);\n    return tree;\n  };\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/normalize/merge-text-nodes.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _textFormattings = require('../text-formattings');\n\nvar _textFormattings2 = _interopRequireDefault(_textFormattings);\n\nvar _generateFunction = require('generate-function');\n\nvar _generateFunction2 = _interopRequireDefault(_generateFunction);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar mergeTextNodes = function mergeTextNodes(sameTypeTextNodes, tree) {\n  var textNode = void 0;\n  var merged = [];\n\n  tree.forEach(function (node) {\n    if (node.type === 'text') {\n      if (textNode) {\n        if (sameTypeTextNodes(textNode, node) && !textNode.mark && !node.mark) {\n          textNode.content = textNode.content + node.content;\n        } else {\n          merged.push(textNode);\n          textNode = node;\n        }\n      } else {\n        textNode = node;\n      }\n    } else {\n      if (textNode) {\n        merged.push(textNode);\n        textNode = null;\n      }\n\n      merged.push(node);\n    }\n  });\n\n  if (textNode) {\n    merged.push(textNode);\n  }\n  return merged;\n};\n\nvar createSameTypeTextNodes = function createSameTypeTextNodes(textFormattings) {\n  var fn = (0, _generateFunction2.default)();\n  fn = fn('function (nodeA, nodeB) {');\n\n  fn = fn('return ' + textFormattings.map(function (row) {\n    return row.property;\n  }).filter(function (property) {\n    return property !== 'content';\n  }).map(function (property) {\n    return 'nodeA[\\'' + property + '\\'] === nodeB[\\'' + property + '\\']';\n  }).join('&&'));\n\n  fn = fn('}');\n  return fn.toFunction();\n};\n\nexports.default = function (opts) {\n  var textFormattings = (0, _textFormattings2.default)(opts);\n  var sameTypeTextNodes = createSameTypeTextNodes(textFormattings);\n\n  return function (tree) {\n    tree.forEach(function (node) {\n      if (node.children) {\n        node.children = mergeTextNodes(sameTypeTextNodes, node.children);\n      }\n    });\n  };\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/normalize/flatten-tree.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar rowHasContent = function rowHasContent(row) {\n  return row.content && row.content.trim().length > 0;\n};\nvar rowHasSize = function rowHasSize(row) {\n  return row.type === 'linebreak' || rowHasContent(row);\n};\nvar hasSize = function hasSize(inlineElements) {\n  return inlineElements.some(rowHasSize);\n};\n\nvar flattenTree = function flattenTree(tree) {\n  var result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  var inlineElements = void 0;\n\n  tree.forEach(function (child) {\n    if (child.type === 'text' || child.type === 'linebreak') {\n      if (inlineElements) {\n        inlineElements.push(child);\n      } else {\n        inlineElements = [child];\n      }\n    } else {\n      if (inlineElements && hasSize(inlineElements)) {\n        result.push({\n          type: 'paragraph',\n          children: inlineElements\n        });\n        inlineElements = null;\n      }\n\n      if (child.type === 'blockquote') {\n        result.push({\n          type: 'blockquote',\n          pullQuote: !!child.pullQuote,\n          children: flattenTree(child.children)\n        });\n      } else if (child.type === 'block') {\n        flattenTree(child.children, result);\n      } else {\n        result.push(child);\n      }\n    }\n  });\n\n  if (inlineElements && hasSize(inlineElements)) {\n    result.push({\n      type: 'paragraph',\n      children: inlineElements\n    });\n  }\n  return result;\n};\n\nexports.default = flattenTree;","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/normalize/handle-whitespace.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar normalizeWhitespace = function normalizeWhitespace(content) {\n  for (; content.indexOf('\\t') !== -1; content = content.replace('\\t', ' ')) {}\n  for (; content.indexOf('\\n') !== -1; content = content.replace('\\n', ' ')) {}\n  for (; content.indexOf('  ') !== -1; content = content.replace('  ', ' ')) {}\n  return content;\n};\n\nvar handleWhitespace = function handleWhitespace(tree) {\n  tree.forEach(function (obj) {\n    if (obj.type === 'text' && obj.content) {\n      obj.content = normalizeWhitespace(obj.content);\n    } else if (obj.children) {\n      handleWhitespace(obj.children);\n    }\n  });\n};\n\nexports.default = handleWhitespace;","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/normalize/minimum-content.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar hasNoContentNodes = function hasNoContentNodes(children) {\n  return children.every(function (child) {\n    return child.mark && !child.content || child.type !== 'text' && child.type !== 'linebreak';\n  });\n};\n\nvar assureMinimumContent = function assureMinimumContent(node) {\n  if (node.children && hasNoContentNodes(node.children)) {\n    node.children.unshift({\n      type: 'linebreak'\n    });\n  }\n};\n\nvar assureOneChild = function assureOneChild(tree) {\n  if (tree.length === 0) {\n    tree.push({\n      type: 'paragraph',\n      children: []\n    });\n  }\n};\n\nexports.default = function (tree) {\n  assureOneChild(tree);\n\n  tree.forEach(function (node) {\n    if (node.type === 'blockquote') {\n      assureOneChild(node.children);\n\n      node.children.forEach(assureMinimumContent);\n    } else {\n      assureMinimumContent(node);\n    }\n  });\n};","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/dist/normalize/remove-extra-linebreaks.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar shouldRemoveLinebreak = function shouldRemoveLinebreak(children) {\n  return children[children.length - 1].type === 'linebreak' && children[children.length - 2] && children[children.length - 2].type !== 'linebreak' && !isEmptyMarkNode(children[children.length - 2]);\n};\n\nexports.default = function (tree) {\n  tree.forEach(function (row) {\n    if (row.children && shouldRemoveLinebreak(row.children)) {\n      row.children = row.children.slice(0, -1);\n    }\n  });\n};\n\nfunction isEmptyMarkNode(node) {\n  return node.mark && !node.content;\n}","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/benchmark/node.js":"'use strict';\n\nimport setup from '../lib';\nimport fs from 'fs';\nimport {join} from 'path';\n\nconst parse = setup();\nconst text = fs.readFileSync(join(__dirname, '/text.html'), 'utf8');\n\nconst start = Date.now();\nlet count = 0;\nlet duration;\n\nfor (; count < 1000; ++count) {\n  parse(text);\n}\nduration = Date.now() - start;\n\nconst msg = (duration / count) + ' ms / iteration';\nconsole.log(msg);\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/index.js":"import createParse from './parse';\nimport createNormalize from './normalize';\n\nmodule.exports = (opts = {}) => {\n  const parse = createParse(opts);\n  const normalize = createNormalize(opts);\n\n  return elm => normalize(parse(elm));\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/text-formattings.js":"const defaultTextFormattings = [\n  {\n    property: 'content',\n    get: elm => (elm.nodeName === '#text' && elm.data) || null\n  },\n  {\n    property: 'href',\n    get: elm => {\n      if (!elm.tagName) {\n        return null;\n      }\n      return (elm.tagName.toLowerCase() === 'a' && elm.getAttribute('href') || null);\n    }\n  },\n  {\n    property: 'italic',\n    get: elm => {\n      if (!elm.tagName) {\n        return false;\n      }\n      const tagName = elm.tagName.toLowerCase();\n\n      return tagName === 'i' ||\n        tagName === 'em' ||\n        elm.style.fontStyle === 'italic';\n    }\n  },\n  {\n    property: 'bold',\n    get: elm => {\n      if (!elm.tagName) {\n        return false;\n      }\n      const fontWeight = elm.style.fontWeight;\n      const tagName = elm.tagName.toLowerCase();\n      return tagName === 'b' ||\n        tagName === 'strong' ||\n        fontWeight === 'bold' ||\n        parseInt(fontWeight, 10) >= 700;\n    }\n  },\n  {\n    property: 'mark',\n    classProperty: 'markClass',\n    getClass: elm => {\n      if (!elm.tagName || elm.tagName.toLowerCase() !== 'mark') {\n        return null;\n      }\n\n      return elm.getAttribute('class');\n    },\n    get: elm => {\n      if (!elm.tagName) {\n        return false;\n      }\n\n      const tagName = elm.tagName.toLowerCase();\n      return tagName === 'mark';\n    }\n  },\n  {\n    property: 'strikethrough',\n    get: elm => {\n      if (!elm.tagName) {\n        return false;\n      }\n\n      const tagName = elm.tagName.toLowerCase();\n      return tagName === 's' ||\n        tagName === 'strike' ||\n        tagName === 'del';\n    }\n  }\n];\n\nexport default opts => opts.customTextFormattings\n    ? defaultTextFormattings.concat(opts.customTextFormattings) : defaultTextFormattings;\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/normalize/flatten-tree.js":"const rowHasContent = row => row.content && row.content.trim().length > 0;\nconst rowHasSize = row => row.type === 'linebreak' || rowHasContent(row);\nconst hasSize = inlineElements => inlineElements.some(rowHasSize);\n\nconst flattenTree = (tree, result = []) => {\n  let inlineElements;\n\n  tree.forEach(child => {\n    if (child.type === 'text' || child.type === 'linebreak') {\n      if (inlineElements) {\n        inlineElements.push(child);\n      } else {\n        inlineElements = [child];\n      }\n    } else {\n      if (inlineElements && hasSize(inlineElements)) {\n        result.push({\n          type: 'paragraph',\n          children: inlineElements\n        });\n        inlineElements = null;\n      }\n\n      if (child.type === 'blockquote') {\n        result.push({\n          type: 'blockquote',\n          pullQuote: !!child.pullQuote,\n          children: flattenTree(child.children)\n        });\n      } else if (child.type === 'block') {\n        flattenTree(child.children, result);\n      } else {\n        result.push(child);\n      }\n    }\n  });\n\n  if (inlineElements && hasSize(inlineElements)) {\n    result.push({\n      type: 'paragraph',\n      children: inlineElements\n    });\n  }\n  return result;\n};\n\nexport default flattenTree;\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/normalize/handle-whitespace.js":"const normalizeWhitespace = content => {\n  for (; content.indexOf('\\t') !== -1; content = content.replace('\\t', ' '));\n  for (; content.indexOf('\\n') !== -1; content = content.replace('\\n', ' '));\n  for (; content.indexOf('  ') !== -1; content = content.replace('  ', ' '));\n  return content;\n};\n\nconst handleWhitespace = tree => {\n  tree.forEach(obj => {\n    if (obj.type === 'text' && obj.content) {\n      obj.content = normalizeWhitespace(obj.content);\n    } else if (obj.children) {\n      handleWhitespace(obj.children);\n    }\n  });\n};\n\nexport default handleWhitespace;\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/normalize/index.js":"import setupMergeTextNodes from './merge-text-nodes';\nimport flattenTree from './flatten-tree';\nimport handleWhitespace from './handle-whitespace';\nimport minimumContent from './minimum-content';\nimport removeExtraLinkebreaks from './remove-extra-linebreaks';\n\nexport default opts => {\n  const mergeTextNodes = setupMergeTextNodes(opts);\n\n  return input => {\n    const tree = flattenTree(input);\n    mergeTextNodes(tree);\n    handleWhitespace(tree);\n    minimumContent(tree);\n    removeExtraLinkebreaks(tree);\n    return tree;\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/normalize/merge-text-nodes.js":"import getTextFormattings from '../text-formattings';\nimport generateFunction from 'generate-function';\n\nconst mergeTextNodes = (sameTypeTextNodes, tree) => {\n  let textNode;\n  const merged = [];\n\n  tree.forEach(node => {\n    if (node.type === 'text') {\n      if (textNode) {\n        if (sameTypeTextNodes(textNode, node) && !textNode.mark && !node.mark) {\n          textNode.content = textNode.content + node.content;\n        } else {\n          merged.push(textNode);\n          textNode = node;\n        }\n      } else {\n        textNode = node;\n      }\n    } else {\n      if (textNode) {\n        merged.push(textNode);\n        textNode = null;\n      }\n\n      merged.push(node);\n    }\n  });\n\n  if (textNode) {\n    merged.push(textNode);\n  }\n  return merged;\n};\n\nconst createSameTypeTextNodes = textFormattings => {\n  let fn = generateFunction();\n  fn = fn('function (nodeA, nodeB) {');\n\n  fn = fn('return ' + textFormattings\n    .map(row => {\n      return row.property;\n    })\n    .filter(property => {\n      return property !== 'content';\n    })\n    .map(property => {\n      return 'nodeA[\\'' + property + '\\'] === nodeB[\\'' + property + '\\']';\n    })\n    .join('&&'));\n\n  fn = fn('}');\n  return fn.toFunction();\n};\n\nexport default opts => {\n  const textFormattings = getTextFormattings(opts);\n  const sameTypeTextNodes = createSameTypeTextNodes(textFormattings);\n\n  return tree => {\n    tree.forEach(node => {\n      if (node.children) {\n        node.children = mergeTextNodes(sameTypeTextNodes, node.children);\n      }\n    });\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/normalize/minimum-content.js":"const hasNoContentNodes = children => children.every(child => {\n  return (child.mark && !child.content) || (child.type !== 'text' && child.type !== 'linebreak');\n});\n\nconst assureMinimumContent = node => {\n  if (node.children && hasNoContentNodes(node.children)) {\n    node.children.unshift({\n      type: 'linebreak'\n    });\n  }\n};\n\nconst assureOneChild = tree => {\n  if (tree.length === 0) {\n    tree.push({\n      type: 'paragraph',\n      children: []\n    });\n  }\n};\n\nexport default tree => {\n  assureOneChild(tree);\n\n  tree.forEach(node => {\n    if (node.type === 'blockquote') {\n      assureOneChild(node.children);\n\n      node.children.forEach(assureMinimumContent);\n    } else {\n      assureMinimumContent(node);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/normalize/remove-extra-linebreaks.js":"const shouldRemoveLinebreak = children => {\n  return children[children.length - 1].type === 'linebreak' &&\n    children[children.length - 2] &&\n    children[children.length - 2].type !== 'linebreak' &&\n    !isEmptyMarkNode(children[children.length - 2]);\n};\n\nexport default tree => {\n  tree.forEach(row => {\n    if (row.children && shouldRemoveLinebreak(row.children)) {\n      row.children = row.children.slice(0, -1);\n    }\n  });\n};\n\nfunction isEmptyMarkNode (node) {\n  return node.mark && !node.content;\n}\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/parse/block-element.js":"import Set from 'es6-set';\nimport blockElements from 'block-elements';\n\nconst BLOCK_ELEMENTS = new Set(blockElements);\nconst TEXT_ELEMENTS = {\n  h1: 'header1',\n  h2: 'header2',\n  h3: 'header3',\n  h4: 'header4',\n  h5: 'header5',\n  h6: 'header6',\n  p: 'paragraph',\n  blockquote: 'blockquote'\n};\n\nconst isPullQuote = (elm) => {\n  return elm.classList.contains('q');\n};\n\nconst createBlockElement = (type, elm) => {\n  if (type === 'blockquote') {\n    return {\n      type,\n      pullQuote: isPullQuote(elm),\n      children: []\n    };\n  } else {\n    return {\n      type,\n      children: []\n    };\n  }\n};\n\n// inject parse to avoid recursive requires\nexport default (parse, text) => {\n  return (elm, textOpts) => {\n    const tagName = elm.tagName.toLowerCase();\n\n    if (BLOCK_ELEMENTS.has(tagName)) {\n      const type = TEXT_ELEMENTS[tagName] || 'block';\n\n      const blockElement = createBlockElement(type, elm);\n\n      if (elm.childNodes.length) {\n        parse(elm.childNodes, text(textOpts, elm), blockElement.children);\n      }\n\n      return blockElement;\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/parse/embeds.js":"import setupText from './text';\nimport {parse} from 'embeds';\n\nconst transformers = {\n  custom: ({height, width, secure, src}) => ({\n    type: 'embed',\n    embedType: 'custom',\n    caption: [],\n    attribution: [],\n    width,\n    height,\n    secure,\n    src\n  }),\n  vine: ({id, url}) => ({\n    type: 'embed',\n    embedType: 'vine',\n    caption: [],\n    attribution: [],\n    id,\n    url\n  }),\n  spotify: ({spotifyUri, width, height, url}) => ({\n    type: 'embed',\n    embedType: 'spotify',\n    caption: [],\n    attribution: [],\n    spotifyUri,\n    width,\n    height,\n    url\n  }),\n  facebook: ({embedAs, headline, date, text, url, user}) => ({\n    type: 'embed',\n    embedType: 'facebook',\n    caption: [],\n    attribution: [],\n    headline: headline || '',\n    url,\n    date,\n    user,\n    text,\n    embedAs\n  }),\n  instagram: ({date, id, text, url, user}) => ({\n    type: 'embed',\n    embedType: 'instagram',\n    caption: [],\n    attribution: [],\n    date: date || '',\n    user: user || '',\n    id,\n    text,\n    url\n  }),\n  twitter: ({embedAs, url, date, user, id, text}) => ({\n    type: 'embed',\n    embedType: 'twitter',\n    caption: [],\n    attribution: [],\n    embedAs,\n    url,\n    date,\n    user,\n    id,\n    text\n  }),\n  youtube: ({youtubeId}) => ({\n    type: 'embed',\n    embedType: 'youtube',\n    caption: [],\n    attribution: [],\n    youtubeId\n  }),\n  tumblr: ({url, did, text}) => ({\n    type: 'embed',\n    embedType: 'tumblr',\n    caption: [],\n    url,\n    did,\n    text\n  }),\n  tidal: ({dataId, dataType}) => ({\n    type: 'embed',\n    embedType: 'tidal',\n    caption: [],\n    dataId,\n    dataType\n  }),\n  video: ({width, height, sources}) => ({\n    type: 'embed',\n    embedType: 'video',\n    caption: [],\n    attribution: [],\n    width: width || '',\n    height: height || '',\n    sources\n  }),\n  image: ({width, height, src, alt}) => ({\n    type: 'embed',\n    embedType: 'image',\n    caption: alt ? [{content: alt, type: 'text'}] : [],\n    attribution: [],\n    width: width || '',\n    height: height || '',\n    src\n  })\n};\n\nexport default opts => {\n  const text = setupText(opts);\n  const {customEmbedTypes = []} = opts;\n\n  const getEmbed = (elms) => {\n    for (let i = 0; i < elms.length; i++) {\n      let elm = elms[i];\n\n      if (elm && elm.tagName) {\n        const obj = toEmbedObj(elm) || getEmbed(elm.childNodes);\n        if (obj) {\n          return obj;\n        }\n      }\n    }\n  };\n\n  const parseCustomEmbed = elm => {\n    for (let i = 0; i < customEmbedTypes.length; ++i) {\n      const customEmbed = customEmbedTypes[i];\n      const obj = customEmbed.parse(elm);\n      if (obj) {\n        return obj;\n      }\n    }\n  };\n\n  const parseBuiltinEmbed = elm => {\n    const obj = parse(elm);\n    return obj && transformers[obj.type] && transformers[obj.type](obj);\n  };\n\n  const toEmbedObj = elm => {\n    return parseCustomEmbed(elm) || parseBuiltinEmbed(elm) || null;\n  };\n\n  const getCaption = (elms, result, opts) => {\n    for (let i = 0; i < elms.length; i++) {\n      let elm = elms[i];\n\n      // ELEMENT_NODE\n      if (elm.tagName && elm.tagName.toLowerCase() !== 'cite' && elm.childNodes.length) {\n        getCaption(elm.childNodes, result, text(opts, elm));\n      }\n\n      // TEXT_NODE\n      if (elm.nodeName === '#text' && elm.data.length > 0) {\n        result.push(text(opts, elm));\n      }\n    }\n\n    return result;\n  };\n\n  const getAttribution = (elms, result, opts) => {\n    for (let i = 0; i < elms.length; i++) {\n      let elm = elms[i];\n\n      // ELEMENT_NODE\n      if (elm.tagName && elm.childNodes.length) {\n        getAttribution(elm.childNodes, result, text(opts, elm));\n      }\n\n      // TEXT_NODE\n      if (elm.nodeName === '#text' && elm.data.length > 0) {\n        result.push(text(opts, elm));\n      }\n    }\n\n    return result;\n  };\n\n  const getFigureProps = ({attributes, elm}) => {\n    const figureProps = {};\n    if (!elm.attributes || !elm.attributes.length) {\n      return figureProps;\n    }\n\n    attributes.forEach((name) => {\n      const value = elm.getAttribute(name);\n      if (value) {\n        figureProps[name] = value;\n      }\n    });\n\n    return figureProps;\n  };\n\n  return elm => {\n    if (elm.tagName && elm.tagName.toLowerCase() === 'figure') {\n      const obj = getEmbed(elm.childNodes);\n      if (obj && opts.parseFigureProps) {\n        obj.figureProps = getFigureProps({\n          attributes: opts.parseFigureProps,\n          elm\n        });\n      }\n      if (obj) {\n        const figcaptions = elm.getElementsByTagName('figcaption');\n        obj.caption = getCaption(figcaptions, [], {});\n        const cites = elm.getElementsByTagName('cite');\n        obj.attribution = getAttribution(cites, [], {});\n      }\n      return obj;\n    }\n\n    return toEmbedObj(elm);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/parse/index.js":"import Set from 'es6-set';\nimport setupEmbed from './embeds';\nimport setupText from './text';\nimport setupBlockElement from './block-element';\nimport toDOM from 'query-dom';\n\nconst HEAD_NODE_NAMES = new Set([\n  'title', 'base', 'link', 'meta', 'script', 'noscript', 'style'\n]);\n\nconst linebreak = elm => elm.tagName.toLowerCase() === 'br' ? { type: 'linebreak' } : null;\n\nconst isEmptyTextNode = elm => (elm.nodeName === '#text' && elm.data.length === 0);\n\nexport default opts => {\n  const text = setupText(opts);\n  const embed = setupEmbed(opts);\n\n  const parse = (elms, textOpts, result) => {\n    for (let i = 0; i < elms.length; i++) {\n      let elm = elms[i];\n\n      // ELEMENT_NODE\n      if (elm.tagName && !HEAD_NODE_NAMES.has(elm.tagName.toLowerCase())) {\n        elementNode(elm, textOpts, result);\n      }\n\n      // TEXT_NODE\n      if (elm.nodeName === '#text' && elm.data.length > 0) {\n        result.push(text(textOpts, elm));\n      }\n    }\n    return result;\n  };\n\n  const blockElement = setupBlockElement(parse, text);\n\n  const elementNode = (elm, textOpts, result) => {\n    const linebreakResult = linebreak(elm);\n    if (linebreakResult) {\n      result.push(linebreakResult);\n      return;\n    }\n\n    const embedResult = embed(elm);\n    if (embedResult) {\n      result.push(embedResult);\n      return;\n    }\n\n    const blockElementResult = blockElement(elm, textOpts);\n    if (blockElementResult) {\n      result.push(blockElementResult);\n      return;\n    }\n\n    const emptyMark = elm.tagName.toLowerCase() === 'mark' &&\n      (elm.childNodes.length === 0 ||\n      elm.childNodes.length === 1 && isEmptyTextNode(elm.childNodes[0]));\n    if (emptyMark) {\n      result.push(text(textOpts, elm));\n      return;\n    }\n\n    if (elm.childNodes.length) {\n      parse(elm.childNodes, text(textOpts, elm), result);\n    }\n  };\n\n  return input => {\n    if (typeof input === 'string') {\n      return parse(toDOM(input), {}, []);\n    }\n\n    if (input.nodeName) {\n      return parse([input], {}, []);\n    }\n\n    return parse(input, {}, []);\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-html-to-article-json/node_modules/html-to-article-json/lib/parse/text.js":"import generateFunction from 'generate-function';\nimport getTextFormattings from '../text-formattings';\n\nexport default opts => {\n  const textFormattings = getTextFormattings(opts);\n\n  let fn = generateFunction();\n\n  const renderTextOpts = textFormattings.reduce((opts, row) => {\n    opts[row.property] = row.get;\n    if (row.classProperty) {\n      opts[row.classProperty] = row.getClass;\n    }\n    return opts;\n  }, {});\n\n  fn = fn('function text (opts, elm) {')('return {');\n  fn = fn('  type: \\'text\\',');\n\n  Object.keys(renderTextOpts).forEach(key => {\n    fn = fn(\n      '  %s: opts[\\'%s\\'] || renderTextOpts[\\'%s\\'](elm),',\n      key, key, key);\n  });\n\n  fn = fn('};')('}');\n\n  return fn.toFunction({\n    renderTextOpts: renderTextOpts\n  });\n};\n"}